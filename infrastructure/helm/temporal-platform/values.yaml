# Default values for temporal-platform
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  storageClass: ""
  
# Temporal server configuration
temporal:
  image:
    registry: docker.io
    repository: temporalio/temporal
    tag: "1.22.4"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  config:
    namespace: "default"
    logLevel: "info"
    
  frontend:
    service:
      type: ClusterIP
      port: 7233
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
  
  history:
    service:
      type: ClusterIP
      port: 7234
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
  
  matching:
    service:
      type: ClusterIP
      port: 7235
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"
  
  worker:
    service:
      type: ClusterIP
      port: 7239
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"

# Temporal UI configuration
temporalUI:
  enabled: true
  image:
    registry: docker.io
    repository: temporalio/ui
    tag: "2.21.3"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: LoadBalancer
    port: 8080
    annotations: {}
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: temporal-ui.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "100m"

# Application configuration
application:
  image:
    registry: docker.io
    repository: temporal-platform
    tag: "latest"
    pullPolicy: Always
  
  worker:
    enabled: true
    replicaCount: 2
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
  
  api:
    enabled: true
    replicaCount: 2
    service:
      type: LoadBalancer
      port: 8000
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"
  
  config:
    environment: "production"
    debug: false
    logLevel: "INFO"
    maxConcurrentWorkflows: 1000
    maxConcurrentActivities: 1000

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "temporal"
    username: "temporal"
    password: "temporal"
    database: "temporal"
  
  architecture: standalone
  
  primary:
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"
    
    persistence:
      enabled: true
      size: "20Gi"
      storageClass: ""
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Elasticsearch configuration
elasticsearch:
  enabled: true
  
  clusterName: "temporal-cluster"
  nodeGroup: "master"
  
  replicas: 1
  minimumMasterNodes: 1
  
  esJavaOpts: "-Xmx512m -Xms512m"
  
  resources:
    requests:
      cpu: "100m"
      memory: "512Mi"
    limits:
      cpu: "250m"
      memory: "1Gi"
  
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: ""
    resources:
      requests:
        storage: 10Gi
  
  esConfig:
    elasticsearch.yml: |
      cluster.name: "temporal-cluster"
      network.host: 0.0.0.0
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.monitoring.collection.enabled: false

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: monitoring
      interval: 30s
      scrapeTimeout: 10s
  
  grafana:
    enabled: true
    dashboards:
      enabled: true

# Service mesh integration
serviceMesh:
  istio:
    enabled: false
  linkerd:
    enabled: false

# Security configuration
security:
  podSecurityPolicy:
    enabled: false
  
  networkPolicy:
    enabled: false

# Resource quotas and limits
resourceQuota:
  enabled: false
  
limitRange:
  enabled: false

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
